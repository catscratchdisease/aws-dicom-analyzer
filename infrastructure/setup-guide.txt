# AWS DICOM Image Analyzer - Setup Guide

Complete step-by-step guide to deploy the application.

## Prerequisites

- AWS Account with appropriate permissions
- AWS CLI installed and configured
- Python 3.12
- Docker (for building Lambda layers)
- Git

## Step 1: Create S3 Buckets

### Upload Bucket
```bash
export UPLOAD_BUCKET="image-analysis-bucket-$(date +%s)"
aws s3 mb s3://$UPLOAD_BUCKET --region us-east-1
```

### Website Bucket
```bash
export WEBSITE_BUCKET="image-analyzer-website-$(date +%s)"
aws s3 mb s3://$WEBSITE_BUCKET --region us-east-1

# Enable static website hosting
aws s3 website s3://$WEBSITE_BUCKET --index-document index.html

# Make website bucket public
aws s3api put-bucket-policy --bucket $WEBSITE_BUCKET --policy file://infrastructure/website-bucket-policy.json
```

### Configure CORS on Upload Bucket
```bash
aws s3api put-bucket-cors --bucket $UPLOAD_BUCKET --cors-configuration file://infrastructure/s3-cors.json
```

## Step 2: Create DynamoDB Table

```bash
aws dynamodb create-table \
    --table-name ImageAnalysisResults \
    --attribute-definitions AttributeName=jobId,AttributeType=S \
    --key-schema AttributeName=jobId,KeyType=HASH \
    --billing-mode PAY_PER_REQUEST \
    --region us-east-1
```

## Step 3: Create IAM Roles

### Lambda Execution Role
```bash
aws iam create-role \
    --role-name ImageAnalyzerLambdaRole \
    --assume-role-policy-document file://infrastructure/lambda-trust-policy.json

# Attach policies
aws iam attach-role-policy \
    --role-name ImageAnalyzerLambdaRole \
    --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

aws iam attach-role-policy \
    --role-name ImageAnalyzerLambdaRole \
    --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess

aws iam attach-role-policy \
    --role-name ImageAnalyzerLambdaRole \
    --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

aws iam attach-role-policy \
    --role-name ImageAnalyzerLambdaRole \
    --policy-arn arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess
```

## Step 4: Build and Deploy Lambda Layer

```bash
cd layers
./build-layer.sh

# Upload to S3
aws s3 cp dicom-layer.zip s3://$UPLOAD_BUCKET/layers/

# Create Lambda layer
aws lambda publish-layer-version \
    --layer-name pydicom-layer \
    --description "PyDICOM, Pillow, NumPy for DICOM processing" \
    --content S3Bucket=$UPLOAD_BUCKET,S3Key=layers/dicom-layer.zip \
    --compatible-runtimes python3.12 \
    --compatible-architectures x86_64

# Note the LayerVersionArn from output
export LAYER_ARN="<layer-version-arn-from-output>"
```

## Step 5: Deploy Lambda Functions

### Lambda 1: Generate Upload URL
```bash
cd lambda/lambda1-generate-upload-url
zip function.zip lambda_function.py

aws lambda create-function \
    --function-name generateUploadUrl \
    --runtime python3.12 \
    --role arn:aws:iam::YOUR-ACCOUNT-ID:role/ImageAnalyzerLambdaRole \
    --handler lambda_function.lambda_handler \
    --zip-file fileb://function.zip \
    --timeout 30 \
    --memory-size 128 \
    --environment Variables="{UPLOAD_BUCKET=$UPLOAD_BUCKET,TABLE_NAME=ImageAnalysisResults}"
```

### Lambda 2: Process Image
```bash
cd lambda/lambda2-process-image
zip function.zip lambda_function.py

aws lambda create-function \
    --function-name processImage \
    --runtime python3.12 \
    --role arn:aws:iam::YOUR-ACCOUNT-ID:role/ImageAnalyzerLambdaRole \
    --handler lambda_function.lambda_handler \
    --zip-file fileb://function.zip \
    --timeout 300 \
    --memory-size 1024 \
    --layers $LAYER_ARN \
    --environment Variables="{TABLE_NAME=ImageAnalysisResults}"
```

### Lambda 3: Get Results
```bash
cd lambda/lambda3-get-results
zip function.zip lambda_function.py

aws lambda create-function \
    --function-name getResults \
    --runtime python3.12 \
    --role arn:aws:iam::YOUR-ACCOUNT-ID:role/ImageAnalyzerLambdaRole \
    --handler lambda_function.lambda_handler \
    --zip-file fileb://function.zip \
    --timeout 30 \
    --memory-size 128 \
    --environment Variables="{TABLE_NAME=ImageAnalysisResults}"
```

## Step 6: Configure S3 Event Trigger

```bash
# Add permission for S3 to invoke Lambda
aws lambda add-permission \
    --function-name processImage \
    --statement-id s3-trigger \
    --action lambda:InvokeFunction \
    --principal s3.amazonaws.com \
    --source-arn arn:aws:s3:::$UPLOAD_BUCKET

# Create S3 event notification
aws s3api put-bucket-notification-configuration \
    --bucket $UPLOAD_BUCKET \
    --notification-configuration file://infrastructure/s3-notification.json
```

## Step 7: Create API Gateway

```bash
# Create HTTP API
aws apigatewayv2 create-api \
    --name ImageAnalysisAPI \
    --protocol-type HTTP

# Note the API ID from output
export API_ID="<api-id-from-output>"

# Create integrations
aws apigatewayv2 create-integration \
    --api-id $API_ID \
    --integration-type AWS_PROXY \
    --integration-uri arn:aws:lambda:us-east-1:YOUR-ACCOUNT-ID:function:generateUploadUrl \
    --payload-format-version 2.0

export INTEGRATION1_ID="<integration-id-from-output>"

aws apigatewayv2 create-integration \
    --api-id $API_ID \
    --integration-type AWS_PROXY \
    --integration-uri arn:aws:lambda:us-east-1:YOUR-ACCOUNT-ID:function:getResults \
    --payload-format-version 2.0

export INTEGRATION2_ID="<integration-id-from-output>"

# Create routes
aws apigatewayv2 create-route \
    --api-id $API_ID \
    --route-key "POST /request-upload" \
    --target integrations/$INTEGRATION1_ID

aws apigatewayv2 create-route \
    --api-id $API_ID \
    --route-key "GET /get-results" \
    --target integrations/$INTEGRATION2_ID

# Configure CORS
aws apigatewayv2 update-api \
    --api-id $API_ID \
    --cors-configuration AllowOrigins="*",AllowMethods="GET,POST,OPTIONS",AllowHeaders="content-type"

# Get API endpoint
aws apigatewayv2 get-api --api-id $API_ID --query 'ApiEndpoint' --output text
export API_ENDPOINT="<api-endpoint-from-output>"
```

## Step 8: Deploy Frontend

```bash
# Update API endpoint in frontend
cd frontend
# Edit index.html and replace API_ENDPOINT value with your actual endpoint

# Upload to S3
aws s3 cp index.html s3://$WEBSITE_BUCKET/

# Get website URL
aws s3 website s3://$WEBSITE_BUCKET --index-document index.html
echo "Website URL: http://$WEBSITE_BUCKET.s3-website-us-east-1.amazonaws.com"
```

## Step 9: Test the Application

1. Open the website URL in your browser
2. Upload a test image (JPG or DICOM)
3. Wait for processing to complete
4. View the results

## Verification Checklist

- [ ] S3 buckets created and configured
- [ ] DynamoDB table created
- [ ] Lambda functions deployed
- [ ] Lambda layer attached to processImage function
- [ ] S3 event trigger configured
- [ ] API Gateway routes created
- [ ] Frontend deployed and accessible
- [ ] Test upload works end-to-end

## Troubleshooting

### Lambda Timeout
```bash
aws lambda update-function-configuration \
    --function-name processImage \
    --timeout 300
```

### Check CloudWatch Logs
```bash
aws logs tail /aws/lambda/processImage --follow
```

### Update Environment Variables
```bash
aws lambda update-function-configuration \
    --function-name generateUploadUrl \
    --environment Variables="{UPLOAD_BUCKET=$UPLOAD_BUCKET,TABLE_NAME=ImageAnalysisResults}"
```

## Clean Up

To remove all resources:

```bash
# Delete Lambda functions
aws lambda delete-function --function-name generateUploadUrl
aws lambda delete-function --function-name processImage
aws lambda delete-function --function-name getResults

# Delete API Gateway
aws apigatewayv2 delete-api --api-id $API_ID

# Empty and delete S3 buckets
aws s3 rm s3://$UPLOAD_BUCKET --recursive
aws s3 rb s3://$UPLOAD_BUCKET
aws s3 rm s3://$WEBSITE_BUCKET --recursive
aws s3 rb s3://$WEBSITE_BUCKET

# Delete DynamoDB table
aws dynamodb delete-table --table-name ImageAnalysisResults

# Delete IAM role
aws iam detach-role-policy --role-name ImageAnalyzerLambdaRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
aws iam detach-role-policy --role-name ImageAnalyzerLambdaRole --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
aws iam detach-role-policy --role-name ImageAnalyzerLambdaRole --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
aws iam detach-role-policy --role-name ImageAnalyzerLambdaRole --policy-arn arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess
aws iam delete-role --role-name ImageAnalyzerLambdaRole
```